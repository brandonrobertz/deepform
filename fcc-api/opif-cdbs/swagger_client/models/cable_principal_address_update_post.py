# coding: utf-8

"""
    OPIF Service Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CablePrincipalAddressUpdatePost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'principal_address_in_local_files': 'str',
        'principal_address_line1': 'str',
        'principal_address_line2': 'str',
        'principal_po_box': 'str',
        'principal_city': 'str',
        'principal_zip_code': 'str',
        'principal_zip_code_suffix': 'str',
        'principal_state': 'str',
        'psid': 'str',
        'access_token': 'str'
    }

    attribute_map = {
        'principal_address_in_local_files': 'principalAddressInLocalFiles',
        'principal_address_line1': 'principalAddressLine1',
        'principal_address_line2': 'principalAddressLine2',
        'principal_po_box': 'principalPoBox',
        'principal_city': 'principalCity',
        'principal_zip_code': 'principalZipCode',
        'principal_zip_code_suffix': 'principalZipCodeSuffix',
        'principal_state': 'principalState',
        'psid': 'psid',
        'access_token': 'accessToken'
    }

    def __init__(self, principal_address_in_local_files=None, principal_address_line1=None, principal_address_line2=None, principal_po_box=None, principal_city=None, principal_zip_code=None, principal_zip_code_suffix=None, principal_state=None, psid=None, access_token=None):  # noqa: E501
        """CablePrincipalAddressUpdatePost - a model defined in Swagger"""  # noqa: E501
        self._principal_address_in_local_files = None
        self._principal_address_line1 = None
        self._principal_address_line2 = None
        self._principal_po_box = None
        self._principal_city = None
        self._principal_zip_code = None
        self._principal_zip_code_suffix = None
        self._principal_state = None
        self._psid = None
        self._access_token = None
        self.discriminator = None
        if principal_address_in_local_files is not None:
            self.principal_address_in_local_files = principal_address_in_local_files
        if principal_address_line1 is not None:
            self.principal_address_line1 = principal_address_line1
        if principal_address_line2 is not None:
            self.principal_address_line2 = principal_address_line2
        if principal_po_box is not None:
            self.principal_po_box = principal_po_box
        if principal_city is not None:
            self.principal_city = principal_city
        if principal_zip_code is not None:
            self.principal_zip_code = principal_zip_code
        if principal_zip_code_suffix is not None:
            self.principal_zip_code_suffix = principal_zip_code_suffix
        if principal_state is not None:
            self.principal_state = principal_state
        if psid is not None:
            self.psid = psid
        if access_token is not None:
            self.access_token = access_token

    @property
    def principal_address_in_local_files(self):
        """Gets the principal_address_in_local_files of this CablePrincipalAddressUpdatePost.  # noqa: E501

        Mandatory attribute indicating principal address specified in local files or not  # noqa: E501

        :return: The principal_address_in_local_files of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :rtype: str
        """
        return self._principal_address_in_local_files

    @principal_address_in_local_files.setter
    def principal_address_in_local_files(self, principal_address_in_local_files):
        """Sets the principal_address_in_local_files of this CablePrincipalAddressUpdatePost.

        Mandatory attribute indicating principal address specified in local files or not  # noqa: E501

        :param principal_address_in_local_files: The principal_address_in_local_files of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N"]  # noqa: E501
        if principal_address_in_local_files not in allowed_values:
            raise ValueError(
                "Invalid value for `principal_address_in_local_files` ({0}), must be one of {1}"  # noqa: E501
                .format(principal_address_in_local_files, allowed_values)
            )

        self._principal_address_in_local_files = principal_address_in_local_files

    @property
    def principal_address_line1(self):
        """Gets the principal_address_line1 of this CablePrincipalAddressUpdatePost.  # noqa: E501

        address line 1  # noqa: E501

        :return: The principal_address_line1 of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :rtype: str
        """
        return self._principal_address_line1

    @principal_address_line1.setter
    def principal_address_line1(self, principal_address_line1):
        """Sets the principal_address_line1 of this CablePrincipalAddressUpdatePost.

        address line 1  # noqa: E501

        :param principal_address_line1: The principal_address_line1 of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :type: str
        """

        self._principal_address_line1 = principal_address_line1

    @property
    def principal_address_line2(self):
        """Gets the principal_address_line2 of this CablePrincipalAddressUpdatePost.  # noqa: E501

        address line 2  # noqa: E501

        :return: The principal_address_line2 of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :rtype: str
        """
        return self._principal_address_line2

    @principal_address_line2.setter
    def principal_address_line2(self, principal_address_line2):
        """Sets the principal_address_line2 of this CablePrincipalAddressUpdatePost.

        address line 2  # noqa: E501

        :param principal_address_line2: The principal_address_line2 of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :type: str
        """

        self._principal_address_line2 = principal_address_line2

    @property
    def principal_po_box(self):
        """Gets the principal_po_box of this CablePrincipalAddressUpdatePost.  # noqa: E501

        post box number  # noqa: E501

        :return: The principal_po_box of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :rtype: str
        """
        return self._principal_po_box

    @principal_po_box.setter
    def principal_po_box(self, principal_po_box):
        """Sets the principal_po_box of this CablePrincipalAddressUpdatePost.

        post box number  # noqa: E501

        :param principal_po_box: The principal_po_box of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :type: str
        """

        self._principal_po_box = principal_po_box

    @property
    def principal_city(self):
        """Gets the principal_city of this CablePrincipalAddressUpdatePost.  # noqa: E501

        city  # noqa: E501

        :return: The principal_city of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :rtype: str
        """
        return self._principal_city

    @principal_city.setter
    def principal_city(self, principal_city):
        """Sets the principal_city of this CablePrincipalAddressUpdatePost.

        city  # noqa: E501

        :param principal_city: The principal_city of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :type: str
        """

        self._principal_city = principal_city

    @property
    def principal_zip_code(self):
        """Gets the principal_zip_code of this CablePrincipalAddressUpdatePost.  # noqa: E501

        Zip Code  # noqa: E501

        :return: The principal_zip_code of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :rtype: str
        """
        return self._principal_zip_code

    @principal_zip_code.setter
    def principal_zip_code(self, principal_zip_code):
        """Sets the principal_zip_code of this CablePrincipalAddressUpdatePost.

        Zip Code  # noqa: E501

        :param principal_zip_code: The principal_zip_code of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :type: str
        """

        self._principal_zip_code = principal_zip_code

    @property
    def principal_zip_code_suffix(self):
        """Gets the principal_zip_code_suffix of this CablePrincipalAddressUpdatePost.  # noqa: E501

        Zip Code Extension  # noqa: E501

        :return: The principal_zip_code_suffix of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :rtype: str
        """
        return self._principal_zip_code_suffix

    @principal_zip_code_suffix.setter
    def principal_zip_code_suffix(self, principal_zip_code_suffix):
        """Sets the principal_zip_code_suffix of this CablePrincipalAddressUpdatePost.

        Zip Code Extension  # noqa: E501

        :param principal_zip_code_suffix: The principal_zip_code_suffix of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :type: str
        """

        self._principal_zip_code_suffix = principal_zip_code_suffix

    @property
    def principal_state(self):
        """Gets the principal_state of this CablePrincipalAddressUpdatePost.  # noqa: E501

        state code  # noqa: E501

        :return: The principal_state of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :rtype: str
        """
        return self._principal_state

    @principal_state.setter
    def principal_state(self, principal_state):
        """Sets the principal_state of this CablePrincipalAddressUpdatePost.

        state code  # noqa: E501

        :param principal_state: The principal_state of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :type: str
        """

        self._principal_state = principal_state

    @property
    def psid(self):
        """Gets the psid of this CablePrincipalAddressUpdatePost.  # noqa: E501

        cable psid  # noqa: E501

        :return: The psid of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :rtype: str
        """
        return self._psid

    @psid.setter
    def psid(self, psid):
        """Sets the psid of this CablePrincipalAddressUpdatePost.

        cable psid  # noqa: E501

        :param psid: The psid of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :type: str
        """

        self._psid = psid

    @property
    def access_token(self):
        """Gets the access_token of this CablePrincipalAddressUpdatePost.  # noqa: E501

        Access token of the entity/facility  # noqa: E501

        :return: The access_token of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this CablePrincipalAddressUpdatePost.

        Access token of the entity/facility  # noqa: E501

        :param access_token: The access_token of this CablePrincipalAddressUpdatePost.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CablePrincipalAddressUpdatePost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CablePrincipalAddressUpdatePost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
