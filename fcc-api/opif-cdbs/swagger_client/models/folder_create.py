# coding: utf-8

"""
    OPIF Service Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FolderCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'folder_name': 'str',
        'entity_id': 'str',
        'parent_folder_id': 'str',
        'folder_path': 'str',
        'source_service_code': 'str',
        'entity_folder_id': 'str'
    }

    attribute_map = {
        'folder_name': 'folder_name',
        'entity_id': 'entity_id',
        'parent_folder_id': 'parent_folder_id',
        'folder_path': 'folder_path',
        'source_service_code': 'source_service_code',
        'entity_folder_id': 'entity_folder_id'
    }

    def __init__(self, folder_name=None, entity_id=None, parent_folder_id=None, folder_path=None, source_service_code=None, entity_folder_id=None):  # noqa: E501
        """FolderCreate - a model defined in Swagger"""  # noqa: E501
        self._folder_name = None
        self._entity_id = None
        self._parent_folder_id = None
        self._folder_path = None
        self._source_service_code = None
        self._entity_folder_id = None
        self.discriminator = None
        if folder_name is not None:
            self.folder_name = folder_name
        if entity_id is not None:
            self.entity_id = entity_id
        if parent_folder_id is not None:
            self.parent_folder_id = parent_folder_id
        if folder_path is not None:
            self.folder_path = folder_path
        if source_service_code is not None:
            self.source_service_code = source_service_code
        if entity_folder_id is not None:
            self.entity_folder_id = entity_folder_id

    @property
    def folder_name(self):
        """Gets the folder_name of this FolderCreate.  # noqa: E501


        :return: The folder_name of this FolderCreate.  # noqa: E501
        :rtype: str
        """
        return self._folder_name

    @folder_name.setter
    def folder_name(self, folder_name):
        """Sets the folder_name of this FolderCreate.


        :param folder_name: The folder_name of this FolderCreate.  # noqa: E501
        :type: str
        """

        self._folder_name = folder_name

    @property
    def entity_id(self):
        """Gets the entity_id of this FolderCreate.  # noqa: E501


        :return: The entity_id of this FolderCreate.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this FolderCreate.


        :param entity_id: The entity_id of this FolderCreate.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this FolderCreate.  # noqa: E501


        :return: The parent_folder_id of this FolderCreate.  # noqa: E501
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this FolderCreate.


        :param parent_folder_id: The parent_folder_id of this FolderCreate.  # noqa: E501
        :type: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def folder_path(self):
        """Gets the folder_path of this FolderCreate.  # noqa: E501


        :return: The folder_path of this FolderCreate.  # noqa: E501
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this FolderCreate.


        :param folder_path: The folder_path of this FolderCreate.  # noqa: E501
        :type: str
        """

        self._folder_path = folder_path

    @property
    def source_service_code(self):
        """Gets the source_service_code of this FolderCreate.  # noqa: E501


        :return: The source_service_code of this FolderCreate.  # noqa: E501
        :rtype: str
        """
        return self._source_service_code

    @source_service_code.setter
    def source_service_code(self, source_service_code):
        """Sets the source_service_code of this FolderCreate.


        :param source_service_code: The source_service_code of this FolderCreate.  # noqa: E501
        :type: str
        """

        self._source_service_code = source_service_code

    @property
    def entity_folder_id(self):
        """Gets the entity_folder_id of this FolderCreate.  # noqa: E501


        :return: The entity_folder_id of this FolderCreate.  # noqa: E501
        :rtype: str
        """
        return self._entity_folder_id

    @entity_folder_id.setter
    def entity_folder_id(self, entity_folder_id):
        """Sets the entity_folder_id of this FolderCreate.


        :param entity_folder_id: The entity_folder_id of this FolderCreate.  # noqa: E501
        :type: str
        """

        self._entity_folder_id = entity_folder_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FolderCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FolderCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
