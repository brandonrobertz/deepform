# coding: utf-8

"""
    OPIF Service Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CableApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cable_communities_psid_psid_format_get(self, psid, format, **kwargs):  # noqa: E501
        """Cable Communities  # noqa: E501

        Cable Communities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_communities_psid_psid_format_get(psid, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str psid: psid (required)
        :param str format: json,  xml (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cable_communities_psid_psid_format_get_with_http_info(psid, format, **kwargs)  # noqa: E501
        else:
            (data) = self.cable_communities_psid_psid_format_get_with_http_info(psid, format, **kwargs)  # noqa: E501
            return data

    def cable_communities_psid_psid_format_get_with_http_info(self, psid, format, **kwargs):  # noqa: E501
        """Cable Communities  # noqa: E501

        Cable Communities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_communities_psid_psid_format_get_with_http_info(psid, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str psid: psid (required)
        :param str format: json,  xml (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['psid', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cable_communities_psid_psid_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'psid' is set
        if ('psid' not in params or
                params['psid'] is None):
            raise ValueError("Missing the required parameter `psid` when calling `cable_communities_psid_psid_format_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `cable_communities_psid_psid_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'psid' in params:
            path_params['psid'] = params['psid']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cable/communities/psid/{psid}.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cable_eeo_group_by_format_get(self, group_by, emp_unit_id, format, **kwargs):  # noqa: E501
        """Cable eeo  # noqa: E501

        Cable eeo  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_eeo_group_by_format_get(group_by, emp_unit_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_by: Group the eeo data by either employee unit id or form numbers (required)
        :param list[str] emp_unit_id: array of employee unit id(s) (required)
        :param str format: json,  xml (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cable_eeo_group_by_format_get_with_http_info(group_by, emp_unit_id, format, **kwargs)  # noqa: E501
        else:
            (data) = self.cable_eeo_group_by_format_get_with_http_info(group_by, emp_unit_id, format, **kwargs)  # noqa: E501
            return data

    def cable_eeo_group_by_format_get_with_http_info(self, group_by, emp_unit_id, format, **kwargs):  # noqa: E501
        """Cable eeo  # noqa: E501

        Cable eeo  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_eeo_group_by_format_get_with_http_info(group_by, emp_unit_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_by: Group the eeo data by either employee unit id or form numbers (required)
        :param list[str] emp_unit_id: array of employee unit id(s) (required)
        :param str format: json,  xml (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_by', 'emp_unit_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cable_eeo_group_by_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_by' is set
        if ('group_by' not in params or
                params['group_by'] is None):
            raise ValueError("Missing the required parameter `group_by` when calling `cable_eeo_group_by_format_get`")  # noqa: E501
        # verify the required parameter 'emp_unit_id' is set
        if ('emp_unit_id' not in params or
                params['emp_unit_id'] is None):
            raise ValueError("Missing the required parameter `emp_unit_id` when calling `cable_eeo_group_by_format_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `cable_eeo_group_by_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_by' in params:
            path_params['groupBy'] = params['group_by']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'emp_unit_id' in params:
            query_params.append(('empUnitId', params['emp_unit_id']))  # noqa: E501
            collection_formats['empUnitId'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cable/eeo/{groupBy}.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cable_empunitid_update_json_post(self, body, **kwargs):  # noqa: E501
        """Modify Cable service employee units  # noqa: E501

        Modify Cable service employee units  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_empunitid_update_json_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CableServiceEmpUnitsUpdatePost body: Create cable service employee units post data body. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cable_empunitid_update_json_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cable_empunitid_update_json_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cable_empunitid_update_json_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Modify Cable service employee units  # noqa: E501

        Modify Cable service employee units  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_empunitid_update_json_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CableServiceEmpUnitsUpdatePost body: Create cable service employee units post data body. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cable_empunitid_update_json_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cable_empunitid_update_json_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cable/empunitid/update.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cable_getall_format_get(self, format, **kwargs):  # noqa: E501
        """Get All  # noqa: E501

        Get All  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_getall_format_get(format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: json,  xml (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cable_getall_format_get_with_http_info(format, **kwargs)  # noqa: E501
        else:
            (data) = self.cable_getall_format_get_with_http_info(format, **kwargs)  # noqa: E501
            return data

    def cable_getall_format_get_with_http_info(self, format, **kwargs):  # noqa: E501
        """Get All  # noqa: E501

        Get All  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_getall_format_get_with_http_info(format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: json,  xml (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cable_getall_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `cable_getall_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cable/getall.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cable_operator_address_update_json_post(self, body, **kwargs):  # noqa: E501
        """Modify Cable operator address  # noqa: E501

        Modify Cable operator address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_operator_address_update_json_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CableOperatorAddressUpdatePost body: Create cable operator address post data body. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cable_operator_address_update_json_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cable_operator_address_update_json_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cable_operator_address_update_json_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Modify Cable operator address  # noqa: E501

        Modify Cable operator address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_operator_address_update_json_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CableOperatorAddressUpdatePost body: Create cable operator address post data body. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cable_operator_address_update_json_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cable_operator_address_update_json_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cable/operatorAddress/update.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cable_principal_address_update_json_post(self, body, **kwargs):  # noqa: E501
        """Modify Cable principal address  # noqa: E501

        Modify Cable principal address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_principal_address_update_json_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CablePrincipalAddressUpdatePost body: Create cable principal address post data body. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cable_principal_address_update_json_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cable_principal_address_update_json_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cable_principal_address_update_json_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Modify Cable principal address  # noqa: E501

        Modify Cable principal address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_principal_address_update_json_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CablePrincipalAddressUpdatePost body: Create cable principal address post data body. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cable_principal_address_update_json_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cable_principal_address_update_json_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cable/principalAddress/update.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cable_psid_psid_format_get(self, psid, format, **kwargs):  # noqa: E501
        """Cable Details  # noqa: E501

        Cable Details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_psid_psid_format_get(psid, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str psid: psid (required)
        :param str format: json,  xml (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cable_psid_psid_format_get_with_http_info(psid, format, **kwargs)  # noqa: E501
        else:
            (data) = self.cable_psid_psid_format_get_with_http_info(psid, format, **kwargs)  # noqa: E501
            return data

    def cable_psid_psid_format_get_with_http_info(self, psid, format, **kwargs):  # noqa: E501
        """Cable Details  # noqa: E501

        Cable Details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_psid_psid_format_get_with_http_info(psid, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str psid: psid (required)
        :param str format: json,  xml (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['psid', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cable_psid_psid_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'psid' is set
        if ('psid' not in params or
                params['psid'] is None):
            raise ValueError("Missing the required parameter `psid` when calling `cable_psid_psid_format_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `cable_psid_psid_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'psid' in params:
            path_params['psid'] = params['psid']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cable/psid/{psid}.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cable_relationship_username_coalsid_format_get(self, coalsid, format, **kwargs):  # noqa: E501
        """Relationship Cable  # noqa: E501

        Relationship Cable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_relationship_username_coalsid_format_get(coalsid, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coalsid: COALS ID (required)
        :param str format: json,  xml (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cable_relationship_username_coalsid_format_get_with_http_info(coalsid, format, **kwargs)  # noqa: E501
        else:
            (data) = self.cable_relationship_username_coalsid_format_get_with_http_info(coalsid, format, **kwargs)  # noqa: E501
            return data

    def cable_relationship_username_coalsid_format_get_with_http_info(self, coalsid, format, **kwargs):  # noqa: E501
        """Relationship Cable  # noqa: E501

        Relationship Cable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_relationship_username_coalsid_format_get_with_http_info(coalsid, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coalsid: COALS ID (required)
        :param str format: json,  xml (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coalsid', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cable_relationship_username_coalsid_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coalsid' is set
        if ('coalsid' not in params or
                params['coalsid'] is None):
            raise ValueError("Missing the required parameter `coalsid` when calling `cable_relationship_username_coalsid_format_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `cable_relationship_username_coalsid_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'coalsid' in params:
            path_params['COALSID'] = params['coalsid']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cable/relationship/username/{COALSID}.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cable_service_zipcodes_update_json_post(self, body, **kwargs):  # noqa: E501
        """Modify Cable service zip codes  # noqa: E501

        Modify Cable service zip codes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_service_zipcodes_update_json_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CableServiceZipCodesUpdatePost body: Create cable service zipcodes post data body. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cable_service_zipcodes_update_json_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cable_service_zipcodes_update_json_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cable_service_zipcodes_update_json_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Modify Cable service zip codes  # noqa: E501

        Modify Cable service zip codes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cable_service_zipcodes_update_json_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CableServiceZipCodesUpdatePost body: Create cable service zipcodes post data body. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cable_service_zipcodes_update_json_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cable_service_zipcodes_update_json_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cable/serviceZipcodes/update.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
