# coding: utf-8

"""
    OPIF Manager API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FolderApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def folder_create_format_post(self, body, access_token, format, **kwargs):  # noqa: E501
        """Create new folder  # noqa: E501

        Create new folder with the folder details specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_create_format_post(body, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FolderCreatePost body: Create folder post data body. (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: FolderCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_create_format_post_with_http_info(body, access_token, format, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_create_format_post_with_http_info(body, access_token, format, **kwargs)  # noqa: E501
            return data

    def folder_create_format_post_with_http_info(self, body, access_token, format, **kwargs):  # noqa: E501
        """Create new folder  # noqa: E501

        Create new folder with the folder details specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_create_format_post_with_http_info(body, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FolderCreatePost body: Create folder post data body. (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: FolderCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'access_token', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_create_format_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `folder_create_format_post`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `folder_create_format_post`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `folder_create_format_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/folder/create.{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FolderCreate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_delete_folder_id_entity_id_service_code_format_delete(self, folder_id, entity_id, format, access_token, service_code, **kwargs):  # noqa: E501
        """Delete Folder  # noqa: E501

        Mark the specified folder as deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_delete_folder_id_entity_id_service_code_format_delete(folder_id, entity_id, format, access_token, service_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_id: Unique Id of the folder. (required)
        :param str entity_id: Unique Id of the entity. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :param str access_token: API Access Key. (required)
        :param str service_code: Entity Service Code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_delete_folder_id_entity_id_service_code_format_delete_with_http_info(folder_id, entity_id, format, access_token, service_code, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_delete_folder_id_entity_id_service_code_format_delete_with_http_info(folder_id, entity_id, format, access_token, service_code, **kwargs)  # noqa: E501
            return data

    def folder_delete_folder_id_entity_id_service_code_format_delete_with_http_info(self, folder_id, entity_id, format, access_token, service_code, **kwargs):  # noqa: E501
        """Delete Folder  # noqa: E501

        Mark the specified folder as deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_delete_folder_id_entity_id_service_code_format_delete_with_http_info(folder_id, entity_id, format, access_token, service_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_id: Unique Id of the folder. (required)
        :param str entity_id: Unique Id of the entity. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :param str access_token: API Access Key. (required)
        :param str service_code: Entity Service Code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder_id', 'entity_id', 'format', 'access_token', 'service_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_delete_folder_id_entity_id_service_code_format_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder_id' is set
        if ('folder_id' not in params or
                params['folder_id'] is None):
            raise ValueError("Missing the required parameter `folder_id` when calling `folder_delete_folder_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `folder_delete_folder_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `folder_delete_folder_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `folder_delete_folder_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'service_code' is set
        if ('service_code' not in params or
                params['service_code'] is None):
            raise ValueError("Missing the required parameter `service_code` when calling `folder_delete_folder_id_entity_id_service_code_format_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder_id' in params:
            path_params['folderId'] = params['folder_id']  # noqa: E501
        if 'entity_id' in params:
            path_params['entityId'] = params['entity_id']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if 'service_code' in params:
            path_params['serviceCode'] = params['service_code']  # noqa: E501

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/folder/delete/{folderId}/{entityId}/{serviceCode}.{format}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_history_count_jsonentity_identity_id_get(self, entity_id, format, **kwargs):  # noqa: E501
        """Count of Folder changes  # noqa: E501

        Count folders that were modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_history_count_jsonentity_identity_id_get(entity_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Unique Entity Id. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: list[FolderHistoryCount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_history_count_jsonentity_identity_id_get_with_http_info(entity_id, format, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_history_count_jsonentity_identity_id_get_with_http_info(entity_id, format, **kwargs)  # noqa: E501
            return data

    def folder_history_count_jsonentity_identity_id_get_with_http_info(self, entity_id, format, **kwargs):  # noqa: E501
        """Count of Folder changes  # noqa: E501

        Count folders that were modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_history_count_jsonentity_identity_id_get_with_http_info(entity_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Unique Entity Id. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: list[FolderHistoryCount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_history_count_jsonentity_identity_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `folder_history_count_jsonentity_identity_id_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `folder_history_count_jsonentity_identity_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'entity_id' in params:
            query_params.append(('entityId', params['entity_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/folder/historyCount.json?entityId={entityId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FolderHistoryCount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_history_format_get(self, format, **kwargs):  # noqa: E501
        """Folder changes list  # noqa: E501

        Lists folders that were modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_history_format_get(format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :param int count: Number of folders in the list.
        :param str entity_id: Unique Entity Id.
        :param date start_date: Date in ISO-8601 format.<br /><br />YYYY-MM-DD (eg 2015-08-25)
        :param date end_date: Date in ISO-8601 format.<br /><br />YYYY-MM-DD (eg 2015-08-25)
        :param int offset: Starting row number
        :param str status: Folder Status
        :return: list[FolderHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_history_format_get_with_http_info(format, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_history_format_get_with_http_info(format, **kwargs)  # noqa: E501
            return data

    def folder_history_format_get_with_http_info(self, format, **kwargs):  # noqa: E501
        """Folder changes list  # noqa: E501

        Lists folders that were modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_history_format_get_with_http_info(format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :param int count: Number of folders in the list.
        :param str entity_id: Unique Entity Id.
        :param date start_date: Date in ISO-8601 format.<br /><br />YYYY-MM-DD (eg 2015-08-25)
        :param date end_date: Date in ISO-8601 format.<br /><br />YYYY-MM-DD (eg 2015-08-25)
        :param int offset: Starting row number
        :param str status: Folder Status
        :return: list[FolderHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'count', 'entity_id', 'start_date', 'end_date', 'offset', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_history_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `folder_history_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'entity_id' in params:
            query_params.append(('entityId', params['entity_id']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/folder/history.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FolderHistory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_id_folder_id_format_get(self, folder_id, entity_id, format, **kwargs):  # noqa: E501
        """Get Subfolder and files  # noqa: E501

        Get OPIF folder information including list of subfolders and files. Response returned in specified format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_id_folder_id_format_get(folder_id, entity_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_id: Unique Id of the folder. (required)
        :param str entity_id: Unique Entity Id. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_id_folder_id_format_get_with_http_info(folder_id, entity_id, format, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_id_folder_id_format_get_with_http_info(folder_id, entity_id, format, **kwargs)  # noqa: E501
            return data

    def folder_id_folder_id_format_get_with_http_info(self, folder_id, entity_id, format, **kwargs):  # noqa: E501
        """Get Subfolder and files  # noqa: E501

        Get OPIF folder information including list of subfolders and files. Response returned in specified format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_id_folder_id_format_get_with_http_info(folder_id, entity_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_id: Unique Id of the folder. (required)
        :param str entity_id: Unique Entity Id. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder_id', 'entity_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_id_folder_id_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder_id' is set
        if ('folder_id' not in params or
                params['folder_id'] is None):
            raise ValueError("Missing the required parameter `folder_id` when calling `folder_id_folder_id_format_get`")  # noqa: E501
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `folder_id_folder_id_format_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `folder_id_folder_id_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder_id' in params:
            path_params['folderId'] = params['folder_id']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'entity_id' in params:
            query_params.append(('entityId', params['entity_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/folder/id/{folderId}.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Entity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_more_public_folders_format_get(self, entity_id, source_service, format, **kwargs):  # noqa: E501
        """Get More Public Folders   # noqa: E501

        Get folders for the specified entityId in 'More Public Files'category. Response returned in specified format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_more_public_folders_format_get(entity_id, source_service, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Unique Entity Id. (required)
        :param str source_service: Source Service (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: list[Folder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_more_public_folders_format_get_with_http_info(entity_id, source_service, format, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_more_public_folders_format_get_with_http_info(entity_id, source_service, format, **kwargs)  # noqa: E501
            return data

    def folder_more_public_folders_format_get_with_http_info(self, entity_id, source_service, format, **kwargs):  # noqa: E501
        """Get More Public Folders   # noqa: E501

        Get folders for the specified entityId in 'More Public Files'category. Response returned in specified format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_more_public_folders_format_get_with_http_info(entity_id, source_service, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Unique Entity Id. (required)
        :param str source_service: Source Service (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: list[Folder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_id', 'source_service', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_more_public_folders_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `folder_more_public_folders_format_get`")  # noqa: E501
        # verify the required parameter 'source_service' is set
        if ('source_service' not in params or
                params['source_service'] is None):
            raise ValueError("Missing the required parameter `source_service` when calling `folder_more_public_folders_format_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `folder_more_public_folders_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'entity_id' in params:
            query_params.append(('entityId', params['entity_id']))  # noqa: E501
        if 'source_service' in params:
            query_params.append(('sourceService', params['source_service']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/folder/morePublicFolders.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Folder]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_parent_folders_format_get(self, entity_id, source_service, format, **kwargs):  # noqa: E501
        """Get parent folders  # noqa: E501

        Get root folder information including list of subfolders and files. Response returned in specified format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_parent_folders_format_get(entity_id, source_service, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Unique Entity Id. (required)
        :param str source_service: Source Service (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: list[Folder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_parent_folders_format_get_with_http_info(entity_id, source_service, format, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_parent_folders_format_get_with_http_info(entity_id, source_service, format, **kwargs)  # noqa: E501
            return data

    def folder_parent_folders_format_get_with_http_info(self, entity_id, source_service, format, **kwargs):  # noqa: E501
        """Get parent folders  # noqa: E501

        Get root folder information including list of subfolders and files. Response returned in specified format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_parent_folders_format_get_with_http_info(entity_id, source_service, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Unique Entity Id. (required)
        :param str source_service: Source Service (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: list[Folder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_id', 'source_service', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_parent_folders_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `folder_parent_folders_format_get`")  # noqa: E501
        # verify the required parameter 'source_service' is set
        if ('source_service' not in params or
                params['source_service'] is None):
            raise ValueError("Missing the required parameter `source_service` when calling `folder_parent_folders_format_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `folder_parent_folders_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'entity_id' in params:
            query_params.append(('entityId', params['entity_id']))  # noqa: E501
        if 'source_service' in params:
            query_params.append(('sourceService', params['source_service']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/folder/parentFolders.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Folder]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_path_format_get(self, folder_path, entity_id, source_service, format, **kwargs):  # noqa: E501
        """Get Folder for specified path.  # noqa: E501

        Get OPIF folder information. Response returned in specified format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_path_format_get(folder_path, entity_id, source_service, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_path: Complete folder path. (required)
        :param str entity_id: Unique Entity Id. (required)
        :param str source_service: Source Service (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: Folder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_path_format_get_with_http_info(folder_path, entity_id, source_service, format, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_path_format_get_with_http_info(folder_path, entity_id, source_service, format, **kwargs)  # noqa: E501
            return data

    def folder_path_format_get_with_http_info(self, folder_path, entity_id, source_service, format, **kwargs):  # noqa: E501
        """Get Folder for specified path.  # noqa: E501

        Get OPIF folder information. Response returned in specified format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_path_format_get_with_http_info(folder_path, entity_id, source_service, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_path: Complete folder path. (required)
        :param str entity_id: Unique Entity Id. (required)
        :param str source_service: Source Service (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: Folder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder_path', 'entity_id', 'source_service', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_path_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder_path' is set
        if ('folder_path' not in params or
                params['folder_path'] is None):
            raise ValueError("Missing the required parameter `folder_path` when calling `folder_path_format_get`")  # noqa: E501
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `folder_path_format_get`")  # noqa: E501
        # verify the required parameter 'source_service' is set
        if ('source_service' not in params or
                params['source_service'] is None):
            raise ValueError("Missing the required parameter `source_service` when calling `folder_path_format_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `folder_path_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'folder_path' in params:
            query_params.append(('folderPath', params['folder_path']))  # noqa: E501
        if 'entity_id' in params:
            query_params.append(('entityId', params['entity_id']))  # noqa: E501
        if 'source_service' in params:
            query_params.append(('sourceService', params['source_service']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/folder/path.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Folder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_purge_folder_id_entity_id_service_code_format_delete(self, folder_id, entity_id, format, access_token, service_code, **kwargs):  # noqa: E501
        """Purge Folder  # noqa: E501

        Purge the folder with the specified id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_purge_folder_id_entity_id_service_code_format_delete(folder_id, entity_id, format, access_token, service_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_id: Unique Id of the folder. (required)
        :param str entity_id: Unique Id of the entity. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :param str access_token: API Access Key. (required)
        :param str service_code: Entity Service Code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_purge_folder_id_entity_id_service_code_format_delete_with_http_info(folder_id, entity_id, format, access_token, service_code, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_purge_folder_id_entity_id_service_code_format_delete_with_http_info(folder_id, entity_id, format, access_token, service_code, **kwargs)  # noqa: E501
            return data

    def folder_purge_folder_id_entity_id_service_code_format_delete_with_http_info(self, folder_id, entity_id, format, access_token, service_code, **kwargs):  # noqa: E501
        """Purge Folder  # noqa: E501

        Purge the folder with the specified id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_purge_folder_id_entity_id_service_code_format_delete_with_http_info(folder_id, entity_id, format, access_token, service_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_id: Unique Id of the folder. (required)
        :param str entity_id: Unique Id of the entity. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :param str access_token: API Access Key. (required)
        :param str service_code: Entity Service Code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder_id', 'entity_id', 'format', 'access_token', 'service_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_purge_folder_id_entity_id_service_code_format_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder_id' is set
        if ('folder_id' not in params or
                params['folder_id'] is None):
            raise ValueError("Missing the required parameter `folder_id` when calling `folder_purge_folder_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `folder_purge_folder_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `folder_purge_folder_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `folder_purge_folder_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'service_code' is set
        if ('service_code' not in params or
                params['service_code'] is None):
            raise ValueError("Missing the required parameter `service_code` when calling `folder_purge_folder_id_entity_id_service_code_format_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder_id' in params:
            path_params['folderId'] = params['folder_id']  # noqa: E501
        if 'entity_id' in params:
            path_params['entityId'] = params['entity_id']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if 'service_code' in params:
            path_params['serviceCode'] = params['service_code']  # noqa: E501

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/folder/purge/{folderId}/{entityId}/{serviceCode}.{format}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_rename_format_put(self, body, access_token, format, **kwargs):  # noqa: E501
        """Rename Folder  # noqa: E501

        Rename the folder with the specified folder name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_rename_format_put(body, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FolderRenamePost body: Rename folder post data body. (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: FolderUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_rename_format_put_with_http_info(body, access_token, format, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_rename_format_put_with_http_info(body, access_token, format, **kwargs)  # noqa: E501
            return data

    def folder_rename_format_put_with_http_info(self, body, access_token, format, **kwargs):  # noqa: E501
        """Rename Folder  # noqa: E501

        Rename the folder with the specified folder name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_rename_format_put_with_http_info(body, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FolderRenamePost body: Rename folder post data body. (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: FolderUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'access_token', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_rename_format_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `folder_rename_format_put`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `folder_rename_format_put`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `folder_rename_format_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/folder/rename.{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FolderUpdate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_restore_format_put(self, body, access_token, format, **kwargs):  # noqa: E501
        """Restore Folder  # noqa: E501

        Restore the status of the folder with the specified id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_restore_format_put(body, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FolderPost body: Restore folder post data body. (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: FolderUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_restore_format_put_with_http_info(body, access_token, format, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_restore_format_put_with_http_info(body, access_token, format, **kwargs)  # noqa: E501
            return data

    def folder_restore_format_put_with_http_info(self, body, access_token, format, **kwargs):  # noqa: E501
        """Restore Folder  # noqa: E501

        Restore the status of the folder with the specified id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_restore_format_put_with_http_info(body, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FolderPost body: Restore folder post data body. (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: FolderUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'access_token', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_restore_format_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `folder_restore_format_put`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `folder_restore_format_put`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `folder_restore_format_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/folder/restore.{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FolderUpdate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
