# coding: utf-8

"""
    OPIF Manager API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def entity_logo_upload_post(self, image, entity_id, service_code, access_token, **kwargs):  # noqa: E501
        """Upload logo  # noqa: E501

        Upload logo file in jpeg/jpg, png or gif or tiff format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entity_logo_upload_post(image, entity_id, service_code, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image: (required)
        :param str entity_id: (required)
        :param str service_code: (required)
        :param str access_token: API Access Key. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entity_logo_upload_post_with_http_info(image, entity_id, service_code, access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.entity_logo_upload_post_with_http_info(image, entity_id, service_code, access_token, **kwargs)  # noqa: E501
            return data

    def entity_logo_upload_post_with_http_info(self, image, entity_id, service_code, access_token, **kwargs):  # noqa: E501
        """Upload logo  # noqa: E501

        Upload logo file in jpeg/jpg, png or gif or tiff format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entity_logo_upload_post_with_http_info(image, entity_id, service_code, access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image: (required)
        :param str entity_id: (required)
        :param str service_code: (required)
        :param str access_token: API Access Key. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image', 'entity_id', 'service_code', 'access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entity_logo_upload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image' is set
        if ('image' not in params or
                params['image'] is None):
            raise ValueError("Missing the required parameter `image` when calling `entity_logo_upload_post`")  # noqa: E501
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `entity_logo_upload_post`")  # noqa: E501
        # verify the required parameter 'service_code' is set
        if ('service_code' not in params or
                params['service_code'] is None):
            raise ValueError("Missing the required parameter `service_code` when calling `entity_logo_upload_post`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `entity_logo_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'image' in params:
            local_var_files['image'] = params['image']  # noqa: E501
        if 'entity_id' in params:
              # noqa: E501
        if 'service_code' in params:
              # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/entity/logo/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_history_count_jsonentity_identity_id_get(self, entity_id, format, **kwargs):  # noqa: E501
        """Count of Files changes  # noqa: E501

        Count files that were modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_history_count_jsonentity_identity_id_get(entity_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Unique Entity Id. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: list[FileHistoryCount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_history_count_jsonentity_identity_id_get_with_http_info(entity_id, format, **kwargs)  # noqa: E501
        else:
            (data) = self.file_history_count_jsonentity_identity_id_get_with_http_info(entity_id, format, **kwargs)  # noqa: E501
            return data

    def file_history_count_jsonentity_identity_id_get_with_http_info(self, entity_id, format, **kwargs):  # noqa: E501
        """Count of Files changes  # noqa: E501

        Count files that were modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_history_count_jsonentity_identity_id_get_with_http_info(entity_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Unique Entity Id. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: list[FileHistoryCount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_history_count_jsonentity_identity_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `file_history_count_jsonentity_identity_id_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `file_history_count_jsonentity_identity_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'entity_id' in params:
            query_params.append(('entityId', params['entity_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/file/historyCount.json?entityId={entityId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FileHistoryCount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_history_format_get(self, format, **kwargs):  # noqa: E501
        """List changed files  # noqa: E501

        Lists files that were modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_history_format_get(format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :param int count: Number of files in the list.
        :param str entity_id: Unique Entity Id.
        :param date start_date: Date in ISO-8601 format.<br /><br />YYYY-MM-DD (eg 2015-08-25)
        :param date end_date: Date in ISO-8601 format.<br /><br />YYYY-MM-DD (eg 2015-08-25)
        :param int offset: Starting row number
        :param str status: File Status
        :return: list[FileHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_history_format_get_with_http_info(format, **kwargs)  # noqa: E501
        else:
            (data) = self.file_history_format_get_with_http_info(format, **kwargs)  # noqa: E501
            return data

    def file_history_format_get_with_http_info(self, format, **kwargs):  # noqa: E501
        """List changed files  # noqa: E501

        Lists files that were modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_history_format_get_with_http_info(format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :param int count: Number of files in the list.
        :param str entity_id: Unique Entity Id.
        :param date start_date: Date in ISO-8601 format.<br /><br />YYYY-MM-DD (eg 2015-08-25)
        :param date end_date: Date in ISO-8601 format.<br /><br />YYYY-MM-DD (eg 2015-08-25)
        :param int offset: Starting row number
        :param str status: File Status
        :return: list[FileHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'count', 'entity_id', 'start_date', 'end_date', 'offset', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_history_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `file_history_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'entity_id' in params:
            query_params.append(('entityId', params['entity_id']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/file/history.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FileHistory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_id_file_id_format_get(self, file_id, entity_id, format, **kwargs):  # noqa: E501
        """Get File Details  # noqa: E501

        Returns the file information for the specified file id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_id_file_id_format_get(file_id, entity_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_id: Unique Id of the file. (required)
        :param str entity_id: Unique Entity Id. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_id_file_id_format_get_with_http_info(file_id, entity_id, format, **kwargs)  # noqa: E501
        else:
            (data) = self.file_id_file_id_format_get_with_http_info(file_id, entity_id, format, **kwargs)  # noqa: E501
            return data

    def file_id_file_id_format_get_with_http_info(self, file_id, entity_id, format, **kwargs):  # noqa: E501
        """Get File Details  # noqa: E501

        Returns the file information for the specified file id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_id_file_id_format_get_with_http_info(file_id, entity_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_id: Unique Id of the file. (required)
        :param str entity_id: Unique Entity Id. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id', 'entity_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_id_file_id_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `file_id_file_id_format_get`")  # noqa: E501
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `file_id_file_id_format_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `file_id_file_id_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileId'] = params['file_id']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'entity_id' in params:
            query_params.append(('entityId', params['entity_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/file/id/{fileId}.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_move_format_put(self, body, access_token, format, **kwargs):  # noqa: E501
        """Move File   # noqa: E501

        Move the file to a new folder location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_move_format_put(body, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FileMovePost body: File move post data body. (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_move_format_put_with_http_info(body, access_token, format, **kwargs)  # noqa: E501
        else:
            (data) = self.file_move_format_put_with_http_info(body, access_token, format, **kwargs)  # noqa: E501
            return data

    def file_move_format_put_with_http_info(self, body, access_token, format, **kwargs):  # noqa: E501
        """Move File   # noqa: E501

        Move the file to a new folder location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_move_format_put_with_http_info(body, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FileMovePost body: File move post data body. (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'access_token', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_move_format_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `file_move_format_put`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `file_move_format_put`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `file_move_format_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/file/move.{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_purge_file_id_entity_id_service_code_format_delete(self, file_id, entity_id, format, access_token, service_code, **kwargs):  # noqa: E501
        """Purge File  # noqa: E501

        Mark file as purged.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_purge_file_id_entity_id_service_code_format_delete(file_id, entity_id, format, access_token, service_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_id: Unique Id of the file. (required)
        :param str entity_id: Unique Id of the entity. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :param str access_token: API Access Key. (required)
        :param str service_code: Entity Service Code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_purge_file_id_entity_id_service_code_format_delete_with_http_info(file_id, entity_id, format, access_token, service_code, **kwargs)  # noqa: E501
        else:
            (data) = self.file_purge_file_id_entity_id_service_code_format_delete_with_http_info(file_id, entity_id, format, access_token, service_code, **kwargs)  # noqa: E501
            return data

    def file_purge_file_id_entity_id_service_code_format_delete_with_http_info(self, file_id, entity_id, format, access_token, service_code, **kwargs):  # noqa: E501
        """Purge File  # noqa: E501

        Mark file as purged.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_purge_file_id_entity_id_service_code_format_delete_with_http_info(file_id, entity_id, format, access_token, service_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_id: Unique Id of the file. (required)
        :param str entity_id: Unique Id of the entity. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :param str access_token: API Access Key. (required)
        :param str service_code: Entity Service Code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id', 'entity_id', 'format', 'access_token', 'service_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_purge_file_id_entity_id_service_code_format_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `file_purge_file_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `file_purge_file_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `file_purge_file_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `file_purge_file_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'service_code' is set
        if ('service_code' not in params or
                params['service_code'] is None):
            raise ValueError("Missing the required parameter `service_code` when calling `file_purge_file_id_entity_id_service_code_format_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileId'] = params['file_id']  # noqa: E501
        if 'entity_id' in params:
            path_params['entityId'] = params['entity_id']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if 'service_code' in params:
            path_params['serviceCode'] = params['service_code']  # noqa: E501

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/file/purge/{fileId}/{entityId}/{serviceCode}.{format}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_remove_file_id_entity_id_service_code_format_delete(self, file_id, entity_id, format, access_token, service_code, **kwargs):  # noqa: E501
        """Remove File  # noqa: E501

        Mark file as deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_remove_file_id_entity_id_service_code_format_delete(file_id, entity_id, format, access_token, service_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_id: Unique Id of the file. (required)
        :param str entity_id: Unique Id of the entity. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :param str access_token: API Access Key. (required)
        :param str service_code: Entity Service Code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_remove_file_id_entity_id_service_code_format_delete_with_http_info(file_id, entity_id, format, access_token, service_code, **kwargs)  # noqa: E501
        else:
            (data) = self.file_remove_file_id_entity_id_service_code_format_delete_with_http_info(file_id, entity_id, format, access_token, service_code, **kwargs)  # noqa: E501
            return data

    def file_remove_file_id_entity_id_service_code_format_delete_with_http_info(self, file_id, entity_id, format, access_token, service_code, **kwargs):  # noqa: E501
        """Remove File  # noqa: E501

        Mark file as deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_remove_file_id_entity_id_service_code_format_delete_with_http_info(file_id, entity_id, format, access_token, service_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_id: Unique Id of the file. (required)
        :param str entity_id: Unique Id of the entity. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :param str access_token: API Access Key. (required)
        :param str service_code: Entity Service Code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id', 'entity_id', 'format', 'access_token', 'service_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_remove_file_id_entity_id_service_code_format_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `file_remove_file_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `file_remove_file_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `file_remove_file_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `file_remove_file_id_entity_id_service_code_format_delete`")  # noqa: E501
        # verify the required parameter 'service_code' is set
        if ('service_code' not in params or
                params['service_code'] is None):
            raise ValueError("Missing the required parameter `service_code` when calling `file_remove_file_id_entity_id_service_code_format_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileId'] = params['file_id']  # noqa: E501
        if 'entity_id' in params:
            path_params['entityId'] = params['entity_id']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if 'service_code' in params:
            path_params['serviceCode'] = params['service_code']  # noqa: E501

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/file/remove/{fileId}/{entityId}/{serviceCode}.{format}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_rename_format_put(self, body, access_token, format, **kwargs):  # noqa: E501
        """Rename File   # noqa: E501

        Rename the file with specified file name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_rename_format_put(body, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FileRenamePost body: File rename post data body. (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_rename_format_put_with_http_info(body, access_token, format, **kwargs)  # noqa: E501
        else:
            (data) = self.file_rename_format_put_with_http_info(body, access_token, format, **kwargs)  # noqa: E501
            return data

    def file_rename_format_put_with_http_info(self, body, access_token, format, **kwargs):  # noqa: E501
        """Rename File   # noqa: E501

        Rename the file with specified file name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_rename_format_put_with_http_info(body, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FileRenamePost body: File rename post data body. (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'access_token', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_rename_format_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `file_rename_format_put`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `file_rename_format_put`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `file_rename_format_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/file/rename.{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_restore_format_put(self, body, access_token, format, **kwargs):  # noqa: E501
        """Restore File   # noqa: E501

        Restore the file with the specified id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_restore_format_put(body, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FileRestorePost body: File restore post data body. (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_restore_format_put_with_http_info(body, access_token, format, **kwargs)  # noqa: E501
        else:
            (data) = self.file_restore_format_put_with_http_info(body, access_token, format, **kwargs)  # noqa: E501
            return data

    def file_restore_format_put_with_http_info(self, body, access_token, format, **kwargs):  # noqa: E501
        """Restore File   # noqa: E501

        Restore the file with the specified id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_restore_format_put_with_http_info(body, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FileRestorePost body: File restore post data body. (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'access_token', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_restore_format_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `file_restore_format_put`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `file_restore_format_put`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `file_restore_format_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/jsonp', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/file/restore.{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_upload_format_post(self, upload, parent_folder_id, entity_id, service_code, access_token, format, **kwargs):  # noqa: E501
        """Upload file  # noqa: E501

        Upload file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_upload_format_post(upload, parent_folder_id, entity_id, service_code, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str upload: (required)
        :param str parent_folder_id: (required)
        :param str entity_id: (required)
        :param str service_code: (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_upload_format_post_with_http_info(upload, parent_folder_id, entity_id, service_code, access_token, format, **kwargs)  # noqa: E501
        else:
            (data) = self.file_upload_format_post_with_http_info(upload, parent_folder_id, entity_id, service_code, access_token, format, **kwargs)  # noqa: E501
            return data

    def file_upload_format_post_with_http_info(self, upload, parent_folder_id, entity_id, service_code, access_token, format, **kwargs):  # noqa: E501
        """Upload file  # noqa: E501

        Upload file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_upload_format_post_with_http_info(upload, parent_folder_id, entity_id, service_code, access_token, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str upload: (required)
        :param str parent_folder_id: (required)
        :param str entity_id: (required)
        :param str service_code: (required)
        :param str access_token: API Access Key. (required)
        :param str format: Format for the returned results.<br /><br />Valid values: json, jsonp, xml (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upload', 'parent_folder_id', 'entity_id', 'service_code', 'access_token', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_upload_format_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upload' is set
        if ('upload' not in params or
                params['upload'] is None):
            raise ValueError("Missing the required parameter `upload` when calling `file_upload_format_post`")  # noqa: E501
        # verify the required parameter 'parent_folder_id' is set
        if ('parent_folder_id' not in params or
                params['parent_folder_id'] is None):
            raise ValueError("Missing the required parameter `parent_folder_id` when calling `file_upload_format_post`")  # noqa: E501
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `file_upload_format_post`")  # noqa: E501
        # verify the required parameter 'service_code' is set
        if ('service_code' not in params or
                params['service_code'] is None):
            raise ValueError("Missing the required parameter `service_code` when calling `file_upload_format_post`")  # noqa: E501
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `file_upload_format_post`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `file_upload_format_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'upload' in params:
            local_var_files['upload'] = params['upload']  # noqa: E501
        if 'parent_folder_id' in params:
              # noqa: E501
        if 'entity_id' in params:
              # noqa: E501
        if 'service_code' in params:
              # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/file/upload.{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
