# coding: utf-8

"""
    OPIF Manager API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class File(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_id': 'str',
        'file_name': 'str',
        'file_extension': 'str',
        'file_size': 'int',
        'file_status': 'str',
        'folder_id': 'str',
        'created_ts': 'datetime',
        'last_update_ts': 'datetime',
        'file_manager_id': 'str'
    }

    attribute_map = {
        'file_id': 'file_id',
        'file_name': 'file_name',
        'file_extension': 'file_extension',
        'file_size': 'file_size',
        'file_status': 'file_status',
        'folder_id': 'folder_id',
        'created_ts': 'created_ts',
        'last_update_ts': 'last_update_ts',
        'file_manager_id': 'file_manager_id'
    }

    def __init__(self, file_id=None, file_name=None, file_extension=None, file_size=None, file_status=None, folder_id=None, created_ts=None, last_update_ts=None, file_manager_id=None):  # noqa: E501
        """File - a model defined in Swagger"""  # noqa: E501
        self._file_id = None
        self._file_name = None
        self._file_extension = None
        self._file_size = None
        self._file_status = None
        self._folder_id = None
        self._created_ts = None
        self._last_update_ts = None
        self._file_manager_id = None
        self.discriminator = None
        if file_id is not None:
            self.file_id = file_id
        if file_name is not None:
            self.file_name = file_name
        if file_extension is not None:
            self.file_extension = file_extension
        if file_size is not None:
            self.file_size = file_size
        if file_status is not None:
            self.file_status = file_status
        if folder_id is not None:
            self.folder_id = folder_id
        if created_ts is not None:
            self.created_ts = created_ts
        if last_update_ts is not None:
            self.last_update_ts = last_update_ts
        if file_manager_id is not None:
            self.file_manager_id = file_manager_id

    @property
    def file_id(self):
        """Gets the file_id of this File.  # noqa: E501


        :return: The file_id of this File.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this File.


        :param file_id: The file_id of this File.  # noqa: E501
        :type: str
        """

        self._file_id = file_id

    @property
    def file_name(self):
        """Gets the file_name of this File.  # noqa: E501


        :return: The file_name of this File.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this File.


        :param file_name: The file_name of this File.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_extension(self):
        """Gets the file_extension of this File.  # noqa: E501


        :return: The file_extension of this File.  # noqa: E501
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this File.


        :param file_extension: The file_extension of this File.  # noqa: E501
        :type: str
        """

        self._file_extension = file_extension

    @property
    def file_size(self):
        """Gets the file_size of this File.  # noqa: E501


        :return: The file_size of this File.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this File.


        :param file_size: The file_size of this File.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def file_status(self):
        """Gets the file_status of this File.  # noqa: E501

        File Status  # noqa: E501

        :return: The file_status of this File.  # noqa: E501
        :rtype: str
        """
        return self._file_status

    @file_status.setter
    def file_status(self, file_status):
        """Sets the file_status of this File.

        File Status  # noqa: E501

        :param file_status: The file_status of this File.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "upl", "cvt", "ins", "cpy", "err", "err_cvt"]  # noqa: E501
        if file_status not in allowed_values:
            raise ValueError(
                "Invalid value for `file_status` ({0}), must be one of {1}"  # noqa: E501
                .format(file_status, allowed_values)
            )

        self._file_status = file_status

    @property
    def folder_id(self):
        """Gets the folder_id of this File.  # noqa: E501


        :return: The folder_id of this File.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this File.


        :param folder_id: The folder_id of this File.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    @property
    def created_ts(self):
        """Gets the created_ts of this File.  # noqa: E501


        :return: The created_ts of this File.  # noqa: E501
        :rtype: datetime
        """
        return self._created_ts

    @created_ts.setter
    def created_ts(self, created_ts):
        """Sets the created_ts of this File.


        :param created_ts: The created_ts of this File.  # noqa: E501
        :type: datetime
        """

        self._created_ts = created_ts

    @property
    def last_update_ts(self):
        """Gets the last_update_ts of this File.  # noqa: E501


        :return: The last_update_ts of this File.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_ts

    @last_update_ts.setter
    def last_update_ts(self, last_update_ts):
        """Sets the last_update_ts of this File.


        :param last_update_ts: The last_update_ts of this File.  # noqa: E501
        :type: datetime
        """

        self._last_update_ts = last_update_ts

    @property
    def file_manager_id(self):
        """Gets the file_manager_id of this File.  # noqa: E501


        :return: The file_manager_id of this File.  # noqa: E501
        :rtype: str
        """
        return self._file_manager_id

    @file_manager_id.setter
    def file_manager_id(self, file_manager_id):
        """Sets the file_manager_id of this File.


        :param file_manager_id: The file_manager_id of this File.  # noqa: E501
        :type: str
        """

        self._file_manager_id = file_manager_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(File, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, File):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
